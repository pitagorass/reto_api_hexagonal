version: 0.2

env:
  variables:
    AWS_REGION: us-east-1
    ECR_REPO: reto-api

phases:
  pre_build:
    commands:
      - set -euo pipefail
      - echo "== Diagnostics =="
      - echo "WHOAMI=$(whoami)"
      - echo "PWD=$(pwd)"
      - echo "AWS_REGION=${AWS_REGION}"
      - echo "CODEBUILD_BUILD_ID=${CODEBUILD_BUILD_ID:-}"
      - echo "CODEBUILD_BUILD_NUMBER=${CODEBUILD_BUILD_NUMBER:-}"
      - echo "CODEBUILD_SOURCE_REPO_URL=${CODEBUILD_SOURCE_REPO_URL:-}"
      - echo "CODEBUILD_RESOLVED_SOURCE_VERSION=${CODEBUILD_RESOLVED_SOURCE_VERSION:-<empty>}"
      - echo "Docker version:"
      - docker version || (echo "Docker not available. Enable Privileged mode in CodeBuild." && exit 1)
      - echo "AWS CLI:"
      - aws --version

      - echo "== Resolve account and ECR URI =="
      - ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)
      - ECR_URI="$ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/$ECR_REPO"
      - echo "ACCOUNT_ID=$ACCOUNT_ID"
      - echo "ECR_URI=$ECR_URI"

      - echo "== ECR login =="
      - aws ecr get-login-password --region "$AWS_REGION" | docker login --username AWS --password-stdin "$ECR_URI"

      - echo "== Compute IMAGE_TAG (sha7 || build# || yyyymmddHHMMSS) =="
      - RAW_SHA="${CODEBUILD_RESOLVED_SOURCE_VERSION:-}"
      - if [ -n "$RAW_SHA" ]; then SHA7=$(echo "$RAW_SHA" | cut -c1-7); else SHA7=""; fi
      - if [ -n "${SHA7}" ]; then IMAGE_TAG="$SHA7"; elif [ -n "${CODEBUILD_BUILD_NUMBER:-}" ]; then IMAGE_TAG="b${CODEBUILD_BUILD_NUMBER}"; else IMAGE_TAG="$(date +%Y%m%d%H%M%S)"; fi
      - echo "IMAGE_TAG=$IMAGE_TAG"

      - echo "== Ensure repository exists (idempotent) =="
      - aws ecr describe-repositories --repository-names "$ECR_REPO" >/dev/null 2>&1 || aws ecr create-repository --repository-name "$ECR_REPO" >/dev/null

  build:
    commands:
      - set -euo pipefail
      - echo "== Build image =="
      - docker build --pull -t "$ECR_URI:$IMAGE_TAG" .
      - docker tag "$ECR_URI:$IMAGE_TAG" "$ECR_URI:latest"

  post_build:
    commands:
      - set -euo pipefail
      - echo "== Push image =="
      - docker push "$ECR_URI:$IMAGE_TAG"
      - docker push "$ECR_URI:latest"
      - echo "== Produce imagedefinitions.json for ECS deployment =="
      - printf '[{"name":"reto-api","imageUri":"%s"}]\n' "$ECR_URI:$IMAGE_TAG" > imagedefinitions.json
      - echo "imagedefinitions.json:"
      - cat imagedefinitions.json

artifacts:
  files:
    - imagedefinitions.json
